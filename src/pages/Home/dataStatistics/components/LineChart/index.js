import "./index.css";
import { Line } from "@ant-design/plots";

const LineChart = (props) => {
  const dataOrigin = {
    0: [],
    31587624: [
      "2022/3/25 19:34",
      "2022/3/25 19:37",
      "2022/3/25 19:40",
      "2022/3/25 19:42",
      "2022/3/25 19:45",
      "2022/3/25 19:48",
      "2022/3/25 19:51",
      "2022/3/25 19:53",
      "2022/3/25 19:56",
      "2022/3/25 19:59",
      "2022/3/25 20:02",
      "2022/3/25 20:04",
      "2022/3/25 20:07",
      "2022/3/25 20:10",
      "2022/3/25 20:12",
      "2022/3/25 20:15",
      "2022/3/25 20:18",
      "2022/3/25 20:21",
      "2022/3/25 20:24",
      "2022/3/25 20:27",
      "2022/3/25 20:29",
      "2022/3/25 20:32",
      "2022/3/25 20:35",
      "2022/3/25 20:37",
      "2022/3/25 20:40",
      "2022/3/25 20:43",
      "2022/3/25 20:46",
      "2022/3/25 20:48",
      "2022/3/25 20:51",
      "2022/3/25 20:54",
      "2022/3/25 20:57",
      "2022/3/25 21:01",
      "2022/3/25 21:04",
      "2022/3/25 21:07",
      "2022/3/25 21:09",
      "2022/3/25 21:13",
      "2022/3/25 20:01",
      "2022/3/25 20:04",
      "2022/3/25 20:07",
      "2022/3/25 20:10",
      "2022/3/25 20:13",
      "2022/3/25 20:15",
      "2022/3/25 20:18",
      "2022/3/25 20:20",
      "2022/3/25 20:22",
      "2022/3/25 20:25",
      "2022/3/25 20:27",
      "2022/3/25 20:30",
      "2022/3/25 20:32",
      "2022/3/25 20:35",
      "2022/3/25 20:37",
      "2022/3/25 20:40",
      "2022/3/25 20:43",
      "2022/3/25 20:45",
      "2022/3/25 20:48",
      "2022/3/25 20:51",
      "2022/3/25 20:54",
      "2022/3/25 20:56",
      "2022/3/25 20:59",
      "2022/3/25 21:02",
      "2022/3/25 21:04",
      "2022/3/25 21:07",
      "2022/3/25 21:10",
      "2022/3/25 21:12",
      "2022/3/25 21:15",
      "2022/3/25 21:17",
      "2022/3/25 21:20",
      "2022/3/25 21:22",
      "2022/3/25 21:25",
      "2022/3/25 21:29",
      "2022/3/25 21:32",
      "2022/3/25 21:34",
    ],
    68754129: [
      "2022/3/25 21:38",
      "2022/3/25 21:41",
      "2022/3/25 19:31",
      "2022/3/25 19:34",
      "2022/3/25 19:37",
      "2022/3/25 19:40",
      "2022/3/25 19:42",
      "2022/3/25 19:44",
      "2022/3/25 19:47",
      "2022/3/25 19:50",
      "2022/3/25 19:52",
      "2022/3/25 19:55",
      "2022/3/25 19:57",
      "2022/3/25 20:00",
      "2022/3/25 20:03",
      "2022/3/25 20:06",
      "2022/3/25 20:09",
      "2022/3/25 20:12",
      "2022/3/25 20:15",
      "2022/3/25 20:18",
      "2022/3/25 20:20",
      "2022/3/25 20:23",
      "2022/3/25 20:26",
      "2022/3/25 20:29",
      "2022/3/25 20:31",
      "2022/3/25 20:34",
      "2022/3/25 20:37",
      "2022/3/25 20:40",
      "2022/3/25 20:43",
      "2022/3/25 20:46",
      "2022/3/25 20:48",
      "2022/3/25 20:51",
      "2022/3/25 20:55",
      "2022/3/25 20:58",
      "2022/3/25 21:01",
      "2022/3/25 21:03",
      "2022/3/25 21:05",
      "2022/3/25 21:09",
      "2022/3/25 21:11",
      "2022/3/25 21:13",
      "2022/3/25 21:16",
      "2022/3/25 21:18",
      "2022/3/25 21:21",
      "2022/3/25 21:23",
      "2022/3/25 21:25",
    ],
    16794235: [
      "2022/3/25 21:27",
      "2022/3/25 20:03",
      "2022/3/25 20:07",
      "2022/3/25 20:09",
      "2022/3/25 20:12",
      "2022/3/25 20:14",
      "2022/3/25 20:17",
      "2022/3/25 20:19",
      "2022/3/25 20:22",
      "2022/3/25 20:24",
      "2022/3/25 20:27",
      "2022/3/25 20:29",
      "2022/3/25 20:31",
      "2022/3/25 20:34",
      "2022/3/25 20:36",
      "2022/3/25 20:39",
      "2022/3/25 20:41",
      "2022/3/25 20:44",
      "2022/3/25 20:46",
      "2022/3/25 20:48",
      "2022/3/25 20:50",
      "2022/3/25 20:53",
      "2022/3/25 20:55",
      "2022/3/25 20:59",
      "2022/3/25 21:01",
      "2022/3/25 21:03",
      "2022/3/25 21:06",
      "2022/3/25 21:09",
      "2022/3/25 21:11",
      "2022/3/25 21:14",
      "2022/3/25 21:16",
      "2022/3/25 21:18",
      "2022/3/25 21:20",
      "2022/3/25 21:22",
      "2022/3/25 21:25",
      "2022/3/25 19:22",
      "2022/3/25 19:25",
      "2022/3/25 19:28",
      "2022/3/25 19:30",
      "2022/3/25 19:33",
      "2022/3/25 19:39",
      "2022/3/25 19:42",
      "2022/3/25 19:44",
      "2022/3/25 19:47",
      "2022/3/25 19:49",
      "2022/3/25 19:52",
      "2022/3/25 19:54",
      "2022/3/25 19:56",
      "2022/3/25 20:01",
      "2022/3/25 20:04",
      "2022/3/25 20:07",
      "2022/3/25 20:09",
      "2022/3/25 20:11",
      "2022/3/25 20:14",
      "2022/3/25 20:17",
      "2022/3/25 20:19",
      "2022/3/25 20:22",
      "2022/3/25 20:24",
      "2022/3/25 20:26",
      "2022/3/25 20:29",
      "2022/3/25 20:31",
      "2022/3/25 20:33",
      "2022/3/25 20:36",
      "2022/3/25 20:38",
      "2022/3/25 20:40",
      "2022/3/25 20:43",
      "2022/3/25 20:45",
      "2022/3/25 20:47",
      "2022/3/25 20:52",
      "2022/3/25 19:48",
      "2022/3/25 19:50",
      "2022/3/25 19:52",
      "2022/3/25 19:54",
      "2022/3/25 19:56",
      "2022/3/25 19:59",
      "2022/3/25 20:01",
      "2022/3/25 20:04",
    ],
    18536497: [
      "2022/3/25 20:06",
      "2022/3/25 20:08",
      "2022/3/25 20:11",
      "2022/3/25 20:13",
      "2022/3/25 20:15",
      "2022/3/25 20:17",
      "2022/3/25 20:19",
      "2022/3/25 20:23",
      "2022/3/25 20:25",
      "2022/3/25 20:27",
      "2022/3/25 20:30",
      "2022/3/25 20:32",
      "2022/3/25 20:34",
      "2022/3/25 20:36",
      "2022/3/25 20:38",
      "2022/3/25 20:40",
      "2022/3/25 20:42",
      "2022/3/25 20:45",
      "2022/3/25 20:47",
      "2022/3/25 20:49",
      "2022/3/25 20:51",
      "2022/3/25 20:53",
      "2022/3/25 20:55 ",
      "2022/3/25 20:57",
      "2022/3/25 21:00",
      "2022/3/25 21:02",
      "2022/3/25 21:04",
      "2022/3/25 21:06",
      "2022/3/25 21:08",
      "2022/3/25 21:10",
      "2022/3/25 21:13",
      "2022/3/25 21:15",
      "2022/3/25 21:17",
      "2022/3/25 21:19",
      "2022/3/25 21:22",
      "2022/3/25 19:39",
      "2022/3/25 19:43",
      "2022/3/25 19:46",
      "2022/3/25 19:50",
      "2022/3/25 19:53",
      "2022/3/25 19:55",
      "2022/3/25 19:58",
      "2022/3/25 20:00",
      "2022/3/25 20:02",
      "2022/3/25 20:04",
      "2022/3/25 20:06",
      "2022/3/25 20:08",
      "2022/3/25 20:10",
      "2022/3/25 20:13",
      "2022/3/25 20:16",
      "2022/3/25 20:21",
      "2022/3/25 20:23",
      "2022/3/25 19:47",
      "2022/3/25 19:49",
      "2022/3/25 19:51",
      "2022/3/25 19:54",
      "2022/3/25 19:56",
      "2022/3/25 19:57",
      "2022/3/25 19:59",
      "2022/3/25 20:01",
      "2022/3/25 20:03",
      "2022/3/25 20:05",
      "2022/3/25 20:07",
      "2022/3/25 20:09",
      "2022/3/25 20:11",
      "2022/3/25 20:13",
      "2022/3/25 20:15",
      "2022/3/25 20:17",
      "2022/3/25 20:19",
      "2022/3/25 20:21",
      "2022/3/25 20:23",
      "2022/3/25 20:25",
      "2022/3/25 20:27",
      "2022/3/25 20:29",
      "2022/3/25 20:31",
    ],
    15783649: [
      "2022/3/26 20:03",
      "2022/3/26 20:04",
      "2022/3/26 20:05",
      "2022/3/26 20:07",
      "2022/3/26 20:08",
      "2022/3/26 20:09",
      "2022/3/26 20:10",
      "2022/3/26 20:11",
      "2022/3/26 20:12",
      "2022/3/26 20:15",
      "2022/3/26 20:17",
      "2022/3/26 20:18",
      "2022/3/26 20:51",
      "2022/3/26 20:52",
      "2022/3/26 20:51",
      "2022/3/26 20:53",
      "2022/3/26 20:55",
      "2022/3/26 20:57",
      "2022/3/26 21:46",
      "2022/3/26 21:50",
    ],
  };

  function get_unix_time(dateStr) {
    var newstr = dateStr.replace(/-/g, "/");
    var date = new Date(newstr);
    var time_str = date.getTime().toString();
    return time_str.substring(0, 10);
  }

  function getLocalTime(nS) {
    return new Date(parseInt(nS) * 1000)
      .toLocaleString()
      .replace(/:\d{1,2}$/, " ");
  }
  const data1 = dataOrigin[props.eventId];
  data1.forEach((item, index) => {
    data1[index] = get_unix_time(data1[index]);
  });

  data1.sort((a, b) => a - b);
  const data = [];
  let start = data1[0];
  let count = 1;
  for (let i = 1; i < data1.length; i++) {
    if (data1[i] - start > 1800) {
      data.push({
        time: `${getLocalTime(start).substring(5)}-${getLocalTime(
          data1[i]
        ).substring(5)}`,
        value: count,
      });
      count = 1;
      start = data1[i];
    } else {
      count++;
    }
  }
  data.push({
    time: `${getLocalTime(start).substring(5)}  ${getLocalTime(
      data1[data1.length - 1]
    ).substring(5)}`,
    value: count,
  });

  const config = {
    data,
    xField: "time",
    yField: "value",
    label: {},
    xAxis: {
      label: {
        rotate: Math.PI / 3,
        offsetX:38,
        offsetY:30
      },
    },
    point: {
      size: 5,
      shape: "diamond",
      style: {
        fill: "white",
        stroke: "#5B8FF9",
        lineWidth: 2,
      },
    },
    tooltip: {
      showMarkers: false,
    },
    state: {
      active: {
        style: {
          shadowBlur: 4,
          stroke: "#000",
          fill: "red",
        },
      },
    },
    interactions: [
      {
        type: "marker-active",
      },
    ],
  };
  return <Line {...config} className="Line" />;
};

export default LineChart;
